apply plugin: 'java'
group = 'com.wikia.qa'
version = '1.0.0'
sourceCompatibility = 1.7
apply from: rootProject.file('gradle/static_checks.gradle')

repositories {
    jcenter()
}

ext {
    testSuite = 'src/test/java/com/wikia/webdriver/testsuites/testSuite.xml'
}

buildscript {
    repositories { mavenCentral() }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.0.0'
        classpath 'com.palominolabs.gradle.task:gradle-git-clone-task:0.0.2'
    }
}


import groovy.xml.StreamingMarkupBuilder
import org.ajoberstar.grgit.Credentials
import org.ajoberstar.grgit.Grgit

task runFailed {
    if (project.hasProperty('failedOnly')) {
        println "Gathering failed config"

        def f = new File('testng_failed.xml')

        new URL('http://qa-s2.wikia-prod:8080/view/Wikia-selenium-triggers/job/wikia-test-matrix/groups=ClickTracking,label=webdriver/ws/target/surefire-reports/testng-failed.xml').withInputStream { i ->
            f.withOutputStream {
                it << i
            }
        }
        project.testSuite = f.getAbsolutePath().replace('\\', '/')
    }

}

task getSuite << {
    def parser = new XmlSlurper()
    parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
    def suite = parser.parse(new File('testng-failed.xml'))
    def yasuite = parser.parse(new File('testng-failed2.xml'))

    def nodes = suite.'**'.findAll {
        node -> node.name() == 'class'
    }*.@name

    def nodesToAdd = yasuite.'**'.findAll {
        node -> node.name() == 'class' && !nodes.contains(node.@name)
    }

    println "nodes to add: ${nodesToAdd.size()}"

    suite.test.groups.replaceNode{}

    suite.test.classes.appendNode(nodesToAdd)

    def writer = new FileWriter('mod.xml')

    def builder = new StreamingMarkupBuilder()
    writer << builder.bind {
        mkp.yield suite
    }
}

task initConfig << {
    def configPath = "./../config";

    def dest = new File(configPath);

    if (project.hasProperty("user") && project.hasProperty("pass")) {
        println "User and pass set"
        def cred = new Credentials(username: user, password: pass);

        if (dest.isDirectory()) {
            println "directory exists"
            def repo = Grgit.open(dir: configPath, creds: new Credentials(username: user, password: pass))

            println "Current Config branch: ${repo.getBranch().getCurrent().getName()}"
            println "Pulling branch with rebase ..."
            repo.pull(rebase: true)
        } else {
            println "No config directory in location: ${dest.getAbsolutePath()}"
            println "Cloning configuration ..."
            def grgit = Grgit.
                    clone(dir: './../config', uri: 'https://github.com/Wikia/selenium-tests.git',
                            credentials: new Credentials(username: user, password: pass))
        }
    } else {
        println "User and pass missing. "
        println "Please use -Puser=<your_usernam> -Ppass=<your_password> to download config"

        if (dest.isDirectory()) {
            println "directory exists"
            def repo = Grgit.open(configPath)

            println "Current Config branch: ${repo.getBranch().getCurrent().getName()}"
            println "Can't pull cause of missing user and password ..."
        } else {
            println "No config directory in location: ${dest.getAbsolutePath()}"
            throw new GradleException(
                    "Can't download configuration without user and password \n (config is a private repository). \n " +
                            "Please use -Puser=<your_usernam> -Ppass=<your_password> to download config")
        }
    }
}

// docs: https://gradle.org/docs/current/dsl/org.gradle.api.tasks.testing.Test.html
test {
    println "Test suite used: ${testSuite}"
    useTestNG {
        suiteXmlFiles = testSuite.split(',').
                collect({ path -> new File(path) })
        includeGroups = (project.hasProperty('groups') ? groups : '').split(',')
        useDefaultListeners = true
    }
    testLogging.showStandardStreams = true
    scanForTestClasses = true

    minHeapSize = '800m'
    maxHeapSize = '800m'

    jvmArgs = ['-XX:MaxPermSize=1024m']


    systemProperty 'env', project.hasProperty('env') ? env : 'preview'
    systemProperty 'run_mvn', project.hasProperty('mvn_run') ? mvn_run : ''
    systemProperty 'base-address', project.hasProperty('base_address') ? base_address : ''
    systemProperty 'live-domain', project.hasProperty('live_domain') ? live_domain : ''
    systemProperty 'wiki-name', project.hasProperty('wiki_name') ? wiki_name : 'mediawiki119'
    systemProperty 'browser', project.hasProperty('browser') ? browser : 'CHROME'

    systemProperty 'platform', project.hasProperty('platform') ? platform : ''
    systemProperty 'platform-version',
            project.hasProperty('platform_version') ? platform_version : ''
    systemProperty 'device-id', project.hasProperty('device_id') ? device_id : ''
    systemProperty 'mobile-config', '/selenium-config/mobile-config.xml'
    systemProperty 'config', '/selenium-config/config.xml'
    systemProperty 'captcha', '/selenium-config/captcha.txt'

    outputs.upToDateWhen { false }
}

dependencies {
    def webdriverVersion = '2.43.1'
    testCompile "junit:junit:4.11"
    testCompile 'org.apache.httpcomponents:httpcore:4.3.3'
    testCompile 'net.kennychua:phantomjs-qunit-runner:1.0.14'
    testCompile 'org.eclipse.jetty:jetty-server:8.1.15.v20140411'
    testCompile 'org.eclipse.jetty:jetty-servlet:8.1.15.v20140411'
    testCompile 'org.eclipse.jetty:jetty-server'
    testCompile 'org.eclipse.jetty:jetty-servlet'
    testCompile 'de.sstoehr:har-reader:1.0.0'
    testCompile 'xmlunit:xmlunit:1.3'
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:${webdriverVersion}"
    testCompile "org.seleniumhq.selenium:selenium-server:${webdriverVersion}"
    testCompile "org.seleniumhq.selenium:selenium-java:${webdriverVersion}"
    testCompile "org.seleniumhq.selenium:selenium-api:${webdriverVersion}"
    testCompile 'org.testng:testng:6.9.4'
    testCompile 'junit:junit:4.8.1'
    testCompile 'org.yaml:snakeyaml:1.8'
    testCompile 'org.apache.httpcomponents:httpclient:4.3.5'
    testCompile 'javax.mail:mail:1.4.4'
    testCompile 'commons-io:commons-io:1.3.2'
    testCompile 'commons-configuration:commons-configuration:1.6'
    testCompile 'com.github.detro.ghostdriver:phantomjsdriver:1.0.3'
    testCompile 'com.google.code.gson:gson:2.2.3'
    testCompile 'javax.json:javax.json-api:1.0'
    testCompile 'org.glassfish:javax.json:1.0.4'
    testCompile 'org.json:json:20080701'
    testCompile 'io.appium:java-client:2.1.0'
    testCompile 'joda-time:joda-time:2.7'
    testCompile 'com.jayway.jsonpath:json-path:1.2.0'
    testCompile('biz.neustar:browsermob-proxy:2.0-beta-7') {
        exclude group: 'org.eclipse.jetty'
    }
}
